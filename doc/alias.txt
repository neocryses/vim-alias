*alias* *alias.txt*

==============================================================================
ABOUT                                               *alias-about*

  This plugin lets you define command-line abbreviations which only expand at the beginning of the command prompt.

  You can pass in the optional flags

    -buffer  or  -range

  to create buffer local aliases or ones that accept a range that precedes the
  aliased command.

  These command line abbreviations work like the bash aliases, except that
  the alias is substituted in-place.

==============================================================================
USAGE                                               *alias-usage*

  :Alias [-range] [-buffer] <lhs> <rhs>

  or

  :call CmdAlias(['-range'], ['-buffer'], '<lhs>', '<rhs>')

  :UnAlias [-buffer] <lhs> ...
  :Aliases [-buffer] [<lhs> ...]

  To define the Aliases after Vim has started up, define them in
  `~/.vim/after/plugin/alias.vim`, or add to `~/.vimrc`

  if exists('s:loaded_vimafter')
    silent doautocmd VimAfter VimEnter *
  else
    let s:loaded_vimafter = 1
    augroup VimAfter
      autocmd!
      autocmd VimEnter * source ~/.vim/after/vimrc.vim
    augroup END
  endif

  and define them in `~/.vim/after/vimrc.vim`.

  Examples:

    :Alias   -range   dg   <c-r>=&l:diff?"diffget":"dg"<cr>
    :Alias   -buffer  spl  setlocal\ spell<bar>setlocal\ spelllang=en
    :Alias            w!!  write\ !sudo\ tee\ >\ /dev/null\ %
    :Alias            th   tab\ help
    :Alias            F    find\ *<c-r>=EatChar("\ ")<cr>
    :Alias            sft  setfiletype
    :Alias            g    !git
    :Alias            g!   g!
    :UnAlias          g
    :Aliases

  See :help abbreviations for Eatchar(c).

==============================================================================
CONFIGURATION                                        *alias-configuration*

  The variable 'g:cmdaliasCmdPrefixes' lists the patterns of all commands by
  which an alias command may be preceded and yet expand. It defaults to

  let g:cmdaliasCmdPrefixes = [
    \ '\d*verb\%[ose]', 'debug', 'sil\%[ent]!\?', 'uns\%[ilent]', 'redir\?!\?',
    \ '.*[^|]|',
    \ 'ld!\?', '[cl]fd!\?', '[cl]f\?do!\?',
    \ '\%(\%([.$]\|\d\+\)\%([,;]\%([.$]\|\d\+\)\)*\)\?\s*' .
    \ '\%(argdo\?!\?\|bufdo\?!\?\|windo\?\|tabdo\?\)' ]


==============================================================================
FAQ:

  - The alias

      Alias -range a alias

    does not expand after a range ending in a word character such as .,'m or
    .,.+3, that is, for example

      .,.+3a<space>

    does not expand to

      .,.+3alias

    This is because <space> after '3alias' checks if the command-line
    abbreviation '3alias' expands, and not 'alias'.

    Instead, add a space after the range, that is,

      .,.+3 a

    Then hitting <space> expands 'a' to 'alias', as expected.

  - If one alias that allows for a range extends another by
    nonword-characters, for example

      Alias f  echo\ 'f'
      Alias f. echo\ 'f.'

    then the longer alias, here 'f.' does not expand directly after a range.
    For example, with the above Aliases f and f.,

      '<,'>f.

    does not expand.

  - Since the expansion is in-place, Vim command-line history saves the <rhs>,
    not the <lhs>. This means you can't retrieve a command from history by
    partially typing the <lhs>. Instead, type the <rhs> for this purpose.

vim:ft=help:et:ts=2:sw=2:sts=2:norl:noma:nospell
